import java.util.Scanner;

public class TicTacToe
{
   //copy over your constructor from the Tic Tac Toe Board activity in the previous lesson!
   private int turn;
   private int times = 0;
   private boolean xWin = false;
   private boolean oWin = false;
   
   private String[][] tictactoe = new String[4][4];
   
   public TicTacToe() {
       restartGame();
   }
   
   public void restartGame() {
    for (int i = 0; i < 4; i++) {
        for (int j = 0; j < 4; j++) {
            tictactoe[i][j] = " ";  // Initialize all elements with empty spaces
        }
    }
    
    if (turn != 0) {
        System.out.println("Game has been restarted");
    }
    xWin = false;
    oWin = false;
    turn = 0;
    times = 0;
}

    
    public void playGame() {
        TicTacToe game = new TicTacToe();
        Scanner input = new Scanner(System.in);
        int moveRow = 0;
        int moveCol = 0;
        int times = 0;
        
        
        while (!game.checkWin()) {
            game.printBoard();
            if (game.getTurn() % 2 == 0) {
                System.out.println("Where would user X like to go?");
            }
            else {
                System.out.println("Where would user O like to go?");
            }
            
            //Asks user their move
            System.out.print("Row: ");
            moveRow = input.nextInt();
            System.out.print("Column: ");
            moveCol = input.nextInt();
            input.nextLine();
            
            
            //Checks to see if move is valid, if so it places
            if (game.pickLocation(moveRow, moveCol) == true) {
                game.takeTurn(moveRow, moveCol);
                times++;
            }
            
            //If not valid, it prints this
            else {
                System.out.println("This was an invalid move");
            }
            
            // Tie
            if (times == 9) {
                game.printBoard();
                System.out.println("CAT!");
                break;
            }
        }
        if (game.getOWin() == true) {
            System.out.println("Congratulations to user O for winning!");
        }
        if (game.getXWin() == true) {
            System.out.println("Congratulations to user X for winning!");
        }
        
        System.out.println("Would you like to play again? (yes or no)" );
        String restart = input.nextLine();
        
        if (restart.toUpperCase().equals("YES")) {
            game.restartGame();
            game.playGame();
        }
    
    }

   
   //this method returns the current turn
   public int getTurn()
   {
       return turn;
   }
   
   /*This method prints out the board array on to the console
   */
   public void printBoard()
   {
       tictactoe[0][0] = " ";
       tictactoe[0][1] = "1";
       tictactoe[0][2] = "2";
       tictactoe[0][3] = "3";
       tictactoe[1][0] = "1";
       tictactoe[2][0] = "2";
       tictactoe[3][0] = "3";
       if (times == 0) {
           for (int i = 1; i < 4; i++) {
                for (int j = 1; j < 4; j++) {
                    tictactoe[i][j] = "-"; 
                }
            }
            times++;
       }
       
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                System.out.print(tictactoe[i][j] + " "); 
            }
            System.out.println();
        }
        
   }
   
   //This method returns true if space row, col is a valid space
   public boolean pickLocation(int row, int col)
   {
       if (row > 3 || row < 1 || col > 3 || row < 1) {
           return false;
       }
       
       if (tictactoe[row][col].equals("-")) {
           return true;
       } 
       else {
           return false;
       }
   }

   //This method places an X or O at location row,col based on the int turn
   public void takeTurn(int row, int col)
   {
       if (pickLocation(row, col) == true) {
           if (turn % 2 == 0) {
               tictactoe[row][col] = "X";
               turn++;
           }
           else {
               tictactoe[row][col] = "O";
               turn++;
           }
           
       }
   }
   
   //This method returns a boolean that returns true if a row has three X or O's in a row
   public boolean checkRow()
   {
       for (int i = 1; i < 4; i++) {
           if (tictactoe[i][1].equals("X") && tictactoe[i][2].equals("X") && tictactoe[i][3].equals("X")) {
                xWin = true;
                return true;
           }
           if (tictactoe[i][1].equals("O") && tictactoe[i][2].equals("O") && tictactoe[i][3].equals("O")) {
                oWin = true;
                return true;
           }
       }
       return false;
   }
   
    //This method returns a boolean that returns true if a col has three X or O's
  public boolean checkCol()
{
    for (int i = 1; i < 4; i++) {
        if (tictactoe[1][i].equals("X") && tictactoe[2][i].equals("X") && tictactoe[3][i].equals("X")) {
            xWin = true;
            return true;
        }
        if (tictactoe[1][i].equals("O") && tictactoe[2][i].equals("O") && tictactoe[3][i].equals("O")) {
            oWin = true;
            return true;
        }
    }
    return false;
}

   
    //This method returns a boolean that returns true if either diagonal has three X or O's
   public boolean checkDiag()
   {
       if (tictactoe[1][1].equals("X") && tictactoe[2][2].equals("X") && tictactoe[3][3].equals("X") || tictactoe[1][3].equals("X") && tictactoe[2][2].equals("X") && tictactoe[3][1].equals("X")) {
                xWin = true;
                return true;
           }
        else if (tictactoe[1][1].equals("O") && tictactoe[2][2].equals("O") && tictactoe[3][3].equals("O") || tictactoe[1][3].equals("O") && tictactoe[2][2].equals("O") && tictactoe[3][1].equals("O")) {
                oWin = true;
                return true;
           }
        else {
            return false;
        }
   }
   
   //This method returns a boolean that checks if someone has won the game
   public boolean checkWin()
   {
       if (checkDiag() == true || checkCol() == true || checkRow() == true) {
           return true;
       }
       else {
           return false;
       }
   }

    public boolean getXWin() {
        return xWin;
    }
    public boolean getOWin() {
        return oWin;
    }

}
